Session: 24T1
Assignment: ass1  Submission ID: 5464669


Your submission has been marked. + /usr/bin/less -m /import/reed/7/z5464669/cs9315.ass1.mrk

!!section banner
####### #        #####  #        #####   #####   #####
#       #    #  #     # #    #  #     # #     # #     #
#       #    #  #       #    #  #       #       #     #
 #####  ####### ######  ####### ######  ######   ######
      #      #  #     #      #  #     # #     #       #
#     #      #  #     #      #  #     # #     # #     #
 #####       #   #####       #   #####   #####   #####

5464669	Thottakathu Prasannakumar, Alok        	8543   COMPAS COMPSS

Submissions:-

S 0	Fri Mar 15 21:00:48 2024	5464669 all ass1 0:-2
S 1	Sun Mar 17 21:22:13 2024	5464669 all ass1 0:-2
S 2	Mon Mar 18 13:17:05 2024	5464669 all ass1 -1:-10
S 0	Mon Mar 18 20:45:36 2024	5464669 all ass1 -1:-3

Sun Apr 07 21:28:34 2024		## vx17.orchestra.cse.unsw.EDU.AU ##
!!section listing

===== Submitted pname.source =====


===============================================================================
-rw-r--r-- 1 cs9315 cs9315 8162 Mar 18 20:44 /home/cs9315/24T1.work/ass1/all/5464669/pname.source
===============================================================================

     1	-- The main point to note is when doing ORDER BY family(personname), show(personname) etc.. these functions return text values. YOU DONT NEED TO IMPLEMENT B-TREE Operator class for ordering "text" data type values. ^M
     2	-- Postgres itself has built in default operator class for that. BUT YOU NEED TO ENSURE THAT data type mentioned as return type of those 3 functions are "text" . Ensure to use PG_RETURN_TEXT_P(cstring_to_text( )) in the C code return statmement of these functions.^M
     3	^M
     4	^M
     5	---------------------------------------------------------------------------^M
     6	--^M
     7	-- pname.sql-^M
     8	--    This file shows how to create a new user-defined type and how to^M
     9	--    use this new type.^M
    10	--^M
    11	--^M
    12	-- Portions Copyright (c) 1996-2022, PostgreSQL Global Development Group^M
    13	-- Portions Copyright (c) 1994, Regents of the University of California^M
    14	--^M
    15	-- src/tutorial/pname.source^M
    16	--^M
    17	---------------------------------------------------------------------------^M
    18	--------------------------------------------------------^M
    19	CREATE TYPE PersonName;  --create shell of type and then fill its details about length after declaring pname_in and pname_out.^M
    20	--------------------------------------------------------^M
    21	^M
    22	-- Assume the user defined functions are in _OBJWD_/complex$DLSUFFIX^M
    23	-- (we do not want to assume this is in the dynamic loader search path).^M
    24	-- Look at $PWD/pname.c for the source.  Note that we declare all of^M
    25	-- them as STRICT, so we do not need to cope with NULL inputs in the^M
    26	-- C code.  We also mark them IMMUTABLE, since they always return the^M
    27	-- same outputs given the same inputs.^M
    28	^M
    29	^M
    30	-- the input function 'pname_in' takes a null-terminated string (the^M
    31	-- textual representation of the type) and turns it into the internal^M
    32	-- (in memory) representation. You will get a message telling you 'PersonName'^M
    33	-- does not exist yet but that's okay.^M
    34	^M
    35	CREATE FUNCTION pname_in(cstring)^M
    36	   RETURNS PersonName^M
    37	   AS '_OBJWD_/pname'^M
    38	   LANGUAGE C IMMUTABLE STRICT;^M
    39	^M
    40	-- the output function 'pname_out' takes the internal representation and^M
    41	-- converts it into the textual representation.^M
    42	^M
    43	CREATE FUNCTION pname_out(PersonName)^M
    44	   RETURNS cstring^M
    45	   AS '_OBJWD_/pname'^M
    46	   LANGUAGE C IMMUTABLE STRICT;^M
    47	^M
    48	-- now, we can create the type. The internallength specifies the size of the^M
    49	-- memory block required to hold the type (we need two 8-byte doubles).^M
    50	^M
    51	-----------------------------^M
    52	-- Creating a new type:^M
    53	--	We are going to create a new type called 'PersonName' which represents^M
    54	--	PersonName.^M
    55	--	A user-defined type must have an input and an output function, and^M
    56	--	optionally can have binary input and output functions.  All of these^M
    57	--	are usually user-defined C functions.^M
    58	-----------------------------^M
    59	^M
    60	^M
    61	CREATE TYPE PersonName(^M
    62	   internallength = variable,^M
    63	   input = pname_in,^M
    64	   output = pname_out,^M
    65	   alignment = int            -- in postgres documentation of CREATE TYPE, it says variable length types must have an alignment of atleast 4, since they contain int4 as their first argument.   ^M
    66	);^M
    67	^M
    68	-- the alignment is necessary to decide how the type is stored in memory by Postgres memory management, just like in C , the members of data structure and the order of members affects total size of data structure (see data structure alignment videos). Since, in the data structure too, int was 1st member and i dont think there will be a name with 32 characters i.e. 32 bytes.. so, int will be larger size and also imprtantly, 1st member in data structure, so the size will be in mutliples of "64-bit" (CPU word size in V-lab) or lesser i.e. 32 bit word size because of int data type in any other CPU architectures like 32 bit etc.^M
    69	^M
    70	-----------------------------^M
    71	-- Interfacing New Types with Indexes:^M
    72	--	We cannot define a secondary index (eg. a B-tree) over the new type^M
    73	--	yet. We need to create all the required operators and support^M
    74	--      functions, then we can make the operator class.^M
    75	^M
    76	-- first, define the required operators^M
    77	CREATE FUNCTION pname_lt(PersonName, PersonName) RETURNS bool^M
    78	   AS '_OBJWD_/pname' LANGUAGE C IMMUTABLE STRICT;^M
    79	CREATE FUNCTION pname_le(PersonName, PersonName) RETURNS bool^M
    80	   AS '_OBJWD_/pname' LANGUAGE C IMMUTABLE STRICT;^M
    81	CREATE FUNCTION pname_gt(PersonName, PersonName) RETURNS bool^M
    82	   AS '_OBJWD_/pname' LANGUAGE C IMMUTABLE STRICT;^M
    83	CREATE FUNCTION pname_ge(PersonName, PersonName) RETURNS bool^M
    84	   AS '_OBJWD_/pname' LANGUAGE C IMMUTABLE STRICT;^M
    85	CREATE FUNCTION pname_eq(PersonName, PersonName) RETURNS bool^M
    86	   AS '_OBJWD_/pname' LANGUAGE C IMMUTABLE STRICT;^M
    87	CREATE FUNCTION pname_neq(PersonName, PersonName) RETURNS bool^M
    88	   AS '_OBJWD_/pname' LANGUAGE C IMMUTABLE STRICT;^M
    89	^M
    90	^M
    91	-- Operators below are for ordering by personname type. ^M
    92	^M
    93	CREATE OPERATOR < (^M
    94	   leftarg = PersonName, rightarg = PersonName, procedure = pname_lt,^M
    95	   commutator = > , negator = >= ,^M
    96	   restrict = scalarltsel, join = scalarltjoinsel^M
    97	);^M
    98	CREATE OPERATOR <= (^M
    99	   leftarg = PersonName, rightarg = PersonName, procedure = pname_le,^M
   100	   commutator = >= , negator = > ,^M
   101	   restrict = scalarlesel, join = scalarlejoinsel^M
   102	);^M
   103	CREATE OPERATOR = (^M
   104	   leftarg = PersonName, rightarg = PersonName, procedure = pname_eq,^M
   105	   commutator = = , negator = <> ,^M
   106	   restrict = eqsel, HASHES, join = eqjoinsel^M
   107	);^M
   108	CREATE OPERATOR >= (^M
   109	   leftarg = PersonName, rightarg = PersonName, procedure = pname_ge,^M
   110	   commutator = <= , negator = < ,^M
   111	   restrict = scalargesel, join = scalargejoinsel^M
   112	);^M
   113	CREATE OPERATOR > (^M
   114	   leftarg = PersonName, rightarg = PersonName, procedure = pname_gt,^M
   115	   commutator = < , negator = <= ,^M
   116	   restrict = scalargtsel, join = scalargtjoinsel^M
   117	);^M
   118	CREATE OPERATOR <> (^M
   119	   leftarg = PersonName, rightarg = PersonName, procedure = pname_neq,^M
   120	   commutator = <> , negator = = ,^M
   121	   restrict = neqsel, join = neqjoinsel^M
   122	);^M
   123	^M
   124	^M
   125	-- VERY IMPORTANT. Cstring and text are different. If using return cstring below, then in C code function, use ^M
   126	-- pg_return_cstring. If you use return text below, then you have to use pg_return_text_p(cstring_to_text(^M
   127	-- )).. i think better to use cstring.. simpler.^M
   128	-- DONOT use cstring though. You want Postgres to be able to use inbuilt b-tree operator for ORDER by text datatype^M
   129	^M
   130	-- create the support function too^M
   131	CREATE FUNCTION family(PersonName) RETURNS text^M
   132	   AS '_OBJWD_/pname', 'pname_family' LANGUAGE C IMMUTABLE STRICT;^M
   133	^M
   134	CREATE FUNCTION given(PersonName) RETURNS text^M
   135	   AS '_OBJWD_/pname', 'pname_given' LANGUAGE C IMMUTABLE STRICT;^M
   136	^M
   137	CREATE FUNCTION show(PersonName) RETURNS text			   ^M
   138	   AS '_OBJWD_/pname', 'pname_show' LANGUAGE C IMMUTABLE STRICT;^M
   139	^M
   140	-- I can do function overloading in Pstgres BUT NOT in C i.thus I am NOT going to use same function name 'pname_btree' but having different number of argument / different argument data types, in case i am creating multiple operator class.. but in this case, i dont have to create multiple operator class.. the queries do order by personname i..e datastructure and ORDER by show(personname) etc which are text, which Postgres inbuilt b-tree operator class automatically does i.e. I dont have to implement that.^M
   141	CREATE FUNCTION pname_btree_datastructure(PersonName, PersonName) RETURNS integer^M
   142	   AS '_OBJWD_/pname' LANGUAGE C IMMUTABLE STRICT;^M
   143	^M
   144	CREATE FUNCTION pname_hash(PersonName) RETURNS integer^M
   145	   AS '_OBJWD_/pname' LANGUAGE C IMMUTABLE STRICT;^M
   146	^M
   147	^M
   148	-- this operator class is for b-tree indexing. This b-tree indexing is necessary if you want ORDER BY ASC or ORDER BY DESC keyowrd in SQL to work^M
   149	-- now we can make the operator class^M
   150	CREATE OPERATOR CLASS pname_ops^M
   151	    DEFAULT FOR TYPE PersonName USING btree AS^M
   152	        OPERATOR        1       < ,^M
   153	        OPERATOR        2       <= ,^M
   154	        OPERATOR        3       = ,^M
   155	        OPERATOR        4       >= ,^M
   156	        OPERATOR        5       > ,^M
   157		FUNCTION	1	pname_btree_datastructure(PersonName,PersonName);   -- for ORDER BY realname^M
   158		^M
   159	^M
   160	-- This is for hash tree indexing operator class.       ^M
   161	^M
   162	CREATE OPERATOR CLASS pname_ops^M
   163	    DEFAULT FOR TYPE PersonName USING hash AS^M
   164	        OPERATOR        1       = ,^M
   165	        FUNCTION        1       pname_hash(PersonName);^M
   166	^M
   167	^M


===== Submitted pname.c =====


===============================================================================
-rw-r--r-- 1 cs9315 cs9315 17230 Mar 18 20:44 /home/cs9315/24T1.work/ass1/all/5464669/pname.c
===============================================================================

     1	/*^M
     2	 * src/tutorial/pname.c^M
     3	 *^M
     4	 ******************************************************************************^M
     5	  This file contains routines that can be bound to a Postgres backend and^M
     6	  called by the backend in the process of processing queries.  The calling^M
     7	  format for these routines is dictated by Postgres architecture.^M
     8	******************************************************************************/^M
     9	^M
    10	#include "postgres.h"^M
    11	#include <string.h>^M
    12	#include "fmgr.h"^M
    13	#include "libpq/pqformat.h"		/* needed for send/recv functions */^M
    14	#include <stdbool.h>^M
    15	#include <regex.h>^M
    16	#include "utils/elog.h"       //NECESSARY FOR ELOG FUNCTION		^M
    17	#include "utils/builtins.h"  // NECESSARY FOR PG_RETURN_TEXT_P^M
    18	^M
    19	^M
    20	bool checkName(char *string);^M
    21	char* whitespace_removal(char* str);^M
    22	bool eq(char* fa1, char* fa2, char* ga1, char* ga2);^M
    23	bool lt(char* fa1, char* fa2, char* ga1, char* ga2);^M
    24	bool gt(char* fa1, char* fa2, char* ga1, char* ga2);^M
    25	^M
    26	^M
    27	PG_MODULE_MAGIC;^M
    28	^M
    29	typedef struct PersonName^M
    30	{^M
    31		int 		length;^M
    32		char		pname[FLEXIBLE_ARRAY_MEMBER]; //This is same as giving name[] ^M
    33		// Also, flexible array member MUST be the last member in the data structure.^M
    34	}PersonName;^M
    35	^M
    36	bool checkName(char *string){^M
    37		// Regular expression pattern for validating names^M
    38		char *pattern = "^[A-Z][A-Za-z'-]+([ ][A-Z][A-Za-z'-]+)*,[ ]?[A-Z][A-Za-z'-]+([ ][A-Z][A-Za-z'-]+)*$";^M
    39	^M
    40		// Compile the regular expression^M
    41		regex_t regex;^M
    42		int reti = regcomp(&regex, pattern, REG_EXTENDED);^M
    43		if (reti) {^M
    44			fprintf(stderr, "Could not compile regex\n");^M
    45			return false;^M
    46		}^M
    47	^M
    48		// Execute the regular expression^M
    49		reti = regexec(&regex, string, 0, NULL, 0);^M
    50		if (!reti) {^M
    51			regfree(&regex);^M
    52			return true;^M
    53		} else if (reti == REG_NOMATCH) {^M
    54			regfree(&regex);^M
    55			return false;^M
    56		} else {^M
    57			char error_message[100];^M
    58			regerror(reti, &regex, error_message, sizeof(error_message));^M
    59			regfree(&regex);^M
    60			return false;^M
    61	    }^M
    62	}^M
    63	^M
    64	/*****************************************************************************^M
    65	 * Input/Output functions^M
    66	 *****************************************************************************/^M
    67	^M
    68	char* whitespace_removal(char* str)^M
    69	{^M
    70		//number of spaces in string can be 1 or 2 or any number depending upon name e.g. "Smith, John Andrew" has 2 spaces. Or "Smith, John Andrew Jinx" has 3 spaces^M
    71		^M
    72		char *comma_pos = strchr(str, ','); // Find the first comma character^M
    73		if (*(comma_pos+1) == ' ')  //Only if there is a space immediately after comma^M
    74		{^M
    75		char *space_pos = comma_pos + 1; ^M
    76	    	//int s_length = strlen(str);^M
    77		if (space_pos != NULL) {^M
    78	        	memmove(space_pos, space_pos + 1, strlen(space_pos)); // Shift characters to the left^M
    79	        	// No need to manually give \0 at end.. as that too will be copied in the previous memmove statement.^M
    80			//str[s_length - 1] = "\0"; //Decrease length by 1^M
    81		}^M
    82		}^M
    83		return 0;^M
    84	}^M
    85	^M
    86	^M
    87	PG_FUNCTION_INFO_V1(pname_in);^M
    88	^M
    89	Datum^M
    90	pname_in(PG_FUNCTION_ARGS)^M
    91	{^M
    92		int strlength;^M
    93		PersonName *result;^M
    94		char *str = PG_GETARG_CSTRING(0);^M
    95		if (!checkName(str))^M
    96			ereport(ERROR,(errcode(ERRCODE_INVALID_TEXT_REPRESENTATION),errmsg("invalid input syntax for type %s: \"%s\"","PersonName", str)));^M
    97		whitespace_removal(str); //Remove first white space^M
    98		//elog(LOG,"str: %s", str);^M
    99		strlength = strlen(str)+ 1; //null terminated \0 is there in string^M
   100		//size of includes \0 in its length calculation. strlen function however does not.^M
   101		result = (PersonName *) palloc(VARHDRSZ + strlength);^M
   102		// No need to free result pointer later as any pointer of SQL i.e. done by palloc, not malloc or calloc etc. will be freed automatically.^M
   103		// i.e. those allocated by palloc function.^M
   104		SET_VARSIZE(result, VARHDRSZ + strlength);^M
   105		snprintf(result->pname,strlength, "%s", str);^M
   106		// Using strcpy is not good here i.e. strcpy(str, result->pname); This is because strcpy doesnt automatically add \0 to string unlike snprintf.^M
   107		// THE LENGTH FIELD WILL BE SET BY SET_VARSIZE. SO, donot type the command result->length = strlen(str)^M
   108		//This is wrong -> result = (PersonName *) palloc(sizeof(PersonName)+strlen) // size of personname will give size of fixed part of array^M
   109		PG_RETURN_POINTER(result);^M
   110	}^M
   111	^M
   112	PG_FUNCTION_INFO_V1(pname_out);^M
   113	^M
   114	Datum^M
   115	pname_out(PG_FUNCTION_ARGS)^M
   116	{^M
   117		PersonName    *pname = (PersonName *) PG_GETARG_POINTER(0);^M
   118		char	   *result;^M
   119	^M
   120		result = psprintf("%s", pname->pname);^M
   121		PG_RETURN_CSTRING(result);^M
   122	}^M
   123	^M
   124	/*****************************************************************************^M
   125	 * New Operators^M
   126	 *^M
   127	 * A practical PersonName datatype would provide much more than this, of course.^M
   128	 *****************************************************************************/^M
   129	^M
   130	^M
   131	/*****************************************************************************^M
   132	 * Operator class for defining B-tree index^M
   133	 *^M
   134	 * It's essential that the comparison operators and support function for a^M
   135	 * B-tree index opclass always agree on the relative ordering of any two^M
   136	 * data values.  Experience has shown that it's depressingly easy to write^M
   137	 * unintentionally inconsistent functions.  One way to reduce the odds of^M
   138	 * making a mistake is to make all the functions simple wrappers around^M
   139	 * an internal three-way-comparison function, as we do here.^M
   140	 *****************************************************************************/^M
   141	bool eq(char* fa1, char* fa2, char* ga1, char* ga2)^M
   142	{^M
   143	    //elog(LOG,"a_family: %s b_family: %s a_given: %s b_given: %s",fa1, fa2, ga1, ga2);^M
   144	    //elog(LOG,"a_family: %d b_family: %d a_given: %d b_given: %d",strlen(fa1), strlen(fa2), strlen(ga1), strlen(ga2));    ^M
   145	    if(strcmp(fa1,fa2) == 0 && strcmp(ga1,ga2) == 0)^M
   146	        return true;^M
   147	    else^M
   148	        return false;^M
   149	}^M
   150	^M
   151	bool lt(char* fa1, char* fa2, char* ga1, char* ga2)^M
   152	{^M
   153	    if(strcmp(fa1,fa2) < 0)^M
   154	        return true;^M
   155	    else if(strcmp(fa1,fa2) == 0 && strcmp(ga1,ga2) < 0 )^M
   156	        return true;^M
   157	    else^M
   158	        return false;^M
   159	}^M
   160	^M
   161	bool gt(char* fa1, char* fa2, char* ga1, char* ga2)^M
   162	{^M
   163	    if(strcmp(fa1,fa2) > 0)^M
   164	        return true;^M
   165	    else if(strcmp(fa1,fa2) == 0 && strcmp(ga1,ga2) > 0 )^M
   166	        return true;^M
   167	    else^M
   168	        return false;^M
   169	}^M
   170	^M
   171	static bool^M
   172	pname_internal(PersonName * a, PersonName *b, int c)  //c is the flag value for the type of unary functions.. i.e. given or family or show^M
   173	{^M
   174	    // The original data present at the data structure should not be modified..i.e.the comma should be there inside pname.^M
   175		//So, i will store family name and given name etc. in temporary string a_family, a_given etc...^M
   176		char *a_given, * b_given, *a_family, *b_family;^M
   177		int a_given_pos, b_given_pos;^M
   178		int a_length, b_length;^M
   179		int i=0, j=0;^M
   180		^M
   181		a_length = strlen(a->pname);^M
   182		b_length = strlen(b->pname);^M
   183	^M
   184		for(i = 0; a->pname[i] != '\0'; i++) {^M
   185			if (a->pname[i] == ',') {^M
   186				a_given_pos = i;  //comma position^M
   187				break;^M
   188			}^M
   189		}^M
   190	^M
   191		for(i = 0; b->pname[i] != '\0'; i++) {^M
   192			if (b->pname[i] == ',') {^M
   193				b_given_pos = i;  //comma position^M
   194				break;^M
   195			}^M
   196		}^M
   197	^M
   198		a_family = (char*) palloc ((a_given_pos+1) * sizeof(char));^M
   199		for(i = 0; i < a_given_pos; i++)^M
   200		{^M
   201			a_family[i] = a->pname[i];^M
   202		}^M
   203		a_family[a_given_pos] = '\0';^M
   204	^M
   205		b_family = (char*) palloc ((b_given_pos+1) * sizeof(char));^M
   206		for(i = 0; i < b_given_pos; i++)^M
   207		{^M
   208			b_family[i] = b->pname[i];^M
   209		}^M
   210		b_family[b_given_pos] = '\0';^M
   211	^M
   212		a_given = (char*) palloc ((a_length - a_given_pos) * sizeof(char));^M
   213		^M
   214		for(i = a_given_pos + 1; i < a_length; i++)^M
   215		{^M
   216			a_given[j] = a->pname[i];	^M
   217			//strncat(a_given, &(a->pname[i]), 1);^M
   218			j=j+1;^M
   219		}^M
   220		a_given[a_length - a_given_pos - 1] = '\0';^M
   221		^M
   222		j=0;^M
   223		b_given = (char*) palloc ((b_length - b_given_pos) * sizeof(char));^M
   224		for(i = b_given_pos + 1; i < b_length; i++)^M
   225		{^M
   226			b_given[j] = b->pname[i];	^M
   227			//strncat(b_given, &(b->pname[i]), 1);^M
   228			j=j+1;^M
   229		}^M
   230		b_given[b_length - b_given_pos - 1] = '\0';^M
   231	^M
   232	^M
   233		if (c == 1)  //less than^M
   234		{^M
   235		return lt(a_family, b_family, a_given, b_given);^M
   236		}^M
   237		else if (c==2)  //less than or equal to^M
   238		{^M
   239		return (lt(a_family, b_family, a_given, b_given) || eq(a_family, b_family, a_given, b_given));^M
   240		}^M
   241		else if (c==3)  //equal to^M
   242		{^M
   243		return eq(a_family, b_family, a_given, b_given);^M
   244		}^M
   245		else if (c==4)  //greater than or equal to^M
   246		{^M
   247		return (gt(a_family, b_family, a_given, b_given) || eq(a_family, b_family, a_given, b_given));^M
   248		}^M
   249		else if (c==5) //greater than^M
   250		{^M
   251		return gt(a_family, b_family, a_given, b_given);^M
   252		}^M
   253		else // c==6 ^M
   254		{^M
   255		return !(eq(a_family, b_family, a_given, b_given));^M
   256		}^M
   257		^M
   258		// There is no main function in this c code. If there was, i could have freed all pointers there. But, i think the purpose of integrating postgres sql file with c was that itself.^M
   259		// The below frees will never even occur because the function exits at any of the returns above.^M
   260		// This is why you must use palloc as Postgres will automatically manage the pointers allocated by palloc. And for palloc, you do #include "postgres.h"^M
   261		^M
   262		//free(a_given);^M
   263		//free(b_given);^M
   264		//free(a_family);^M
   265		//free(b_family);^M
   266	}^M
   267	^M
   268	static char*^M
   269	pname_internal_two(PersonName * a, int c)  //c is the flag value for the type of unary functions.. i.e. given or family or show^M
   270	{^M
   271	    char *a_given, *a_family, *a_show_given;^M
   272		int a_given_pos, a_show_given_pos;  //a_given_pos is the position of comma and a_show_given_pos is the position of first space if the given name has two words etc.^M
   273		int a_length;^M
   274		int fullname_length;^M
   275		char *fullname;^M
   276		int i = 0, j=0;^M
   277	^M
   278		a_length = strlen(a->pname);^M
   279	^M
   280		for(i = 0; a->pname[i] != '\0'; i++) {^M
   281			if (a->pname[i] == ',') {^M
   282				a_given_pos = i;  //comma position^M
   283				break;^M
   284			}^M
   285		}^M
   286	^M
   287		a_family = (char*) palloc ((a_given_pos+1) * sizeof(char));^M
   288		for(i = 0; i < a_given_pos; i++)^M
   289		{^M
   290			a_family[i] = a->pname[i];^M
   291		}^M
   292		a_family[a_given_pos] = '\0';^M
   293		^M
   294		a_given = (char*) palloc ((a_length - a_given_pos) * sizeof(char));^M
   295		for(i = a_given_pos + 1; i < a_length; i++)^M
   296		{^M
   297			a_given[j] = a->pname[i];^M
   298			//strncat(a_given, &(a->pname[i]), 1);^M
   299			j=j+1;^M
   300		}^M
   301		a_given[a_length - a_given_pos - 1] = '\0';^M
   302	^M
   303		// For showing full name, if the given name has more than 1 word or name in it, only first word will be taken.^M
   304		// e.g "Smith,John Andrew" i.e. given name will be John Andrew. output of show function i.e. getting fullname , only "John Smith" will be printed.^M
   305		^M
   306		for(i = 0; i < strlen(a_given); i++)^M
   307		{^M
   308			if(a_given[i] == ' '){^M
   309				a_show_given_pos = i;		^M
   310				break;^M
   311			}	^M
   312		}^M
   313		a_show_given = (char*) palloc ((a_show_given_pos + 1) * sizeof(char));^M
   314		^M
   315		j=0;^M
   316		for(i=0; i < a_show_given_pos; i++)^M
   317		{^M
   318			a_show_given[j] = a_given[i];^M
   319			j = j + 1;^M
   320		}^M
   321		a_show_given[a_show_given_pos] = '\0';^M
   322	^M
   323		// To calculate full length needed for the buffer^M
   324		fullname_length = strlen(a_show_given) + strlen(a_family) + 2; // 1 for space, 1 for null terminator^M
   325	^M
   326		// Create a buffer to hold the full name^M
   327		fullname = (char*) palloc (fullname_length * sizeof(char));^M
   328	^M
   329		// Copy the first name to the full name buffer^M
   330	    	strcpy(fullname, a_show_given);^M
   331	^M
   332		// Concatenate a space and the last name to the full name buffer^M
   333	    	strcat(fullname, " "); // Adding space at end of given_name ^M
   334	    	strcat(fullname, a_family);^M
   335	^M
   336		if (c==8) //family^M
   337		{^M
   338		return a_family;^M
   339		}^M
   340		else if (c==9) //given^M
   341		{^M
   342		return a_given;^M
   343		}^M
   344		else  //c=10 //show^M
   345		{^M
   346		return fullname;^M
   347		}^M
   348		^M
   349		//It will never reach these free commands. So, I use palloc instead of malloc so, atleast those pointers created using palloc will automatically be freed by Postgres Memory Management System.^M
   350		//free(a_given);^M
   351		//free(a_family);^M
   352		//free(a_show_given);^M
   353		//free(fullname);^M
   354	}^M
   355	^M
   356	static int pname_compare_datastructure(PersonName* pname1, PersonName* pname2) //For btree ... necessary for ORDER BY^M
   357	{^M
   358	 	// NOW I REALIZE IT WOULD HAVE BEEN FAR EASIER TO CREATE A SEPERATE DATA STRUCTURE TO STORE FAMILY NAME AND GIVEN NAME OF A NAME STRING. AAH, LEAVE IT.	^M
   359		// I don't need to malloc for storing the given, family names again.. as those strings are created and malloced for in pname_internal_two. Since, the string is returned, i.e. pointer to start of null terminated string is returned, i just need to store the returned pointer start address in a pointer variable. so, when i print this pointer or use string functions like strcmp, it will parse the string from start to the null terminated part automatically. Pointers are amazing things.^M
   360		//Remember, postgres FREES THE "ADDRESS" pointed to by the pointers. Even if a pointer address is copied to another pointer ..i.e. both pointers point to same address, Postgres frees the ADDRESS..^M
   361		// what we mean by freeing pointers is freeing the starting address from heap. That is how Postgres deals with memory management, even if you create a 1000 pointers by copying address ie. assigning^M
   362		// i.e. char* a = char* b ... i.e. all pointers pointing to same address, the "ADDRESS" is freed.^M
   363		char* name1_given = pname_internal_two(pname1, 9);^M
   364		char* name2_given = pname_internal_two(pname2, 9);^M
   365		char* name1_family = pname_internal_two(pname1, 8);^M
   366		char* name2_family = pname_internal_two(pname2, 8);^M
   367		// if family names are different then return the strcmp value , else return the strcmp of the given names^M
   368	    	if (strcmp(name1_family, name2_family) != 0) //if true ^M
   369			return strcmp(name1_family, name2_family);     //returns ^M
   370		else^M
   371			return strcmp(name1_given, name2_given);^M
   372	^M
   373	}^M
   374	^M
   375	PG_FUNCTION_INFO_V1(pname_lt);^M
   376	^M
   377	Datum^M
   378	pname_lt(PG_FUNCTION_ARGS)^M
   379	{^M
   380		PersonName    *a = (PersonName *) PG_GETARG_POINTER(0);^M
   381		PersonName    *b = (PersonName *) PG_GETARG_POINTER(1);^M
   382	^M
   383		PG_RETURN_BOOL(pname_internal(a, b, 1));^M
   384	}^M
   385	^M
   386	PG_FUNCTION_INFO_V1(pname_le);^M
   387	^M
   388	Datum^M
   389	pname_le(PG_FUNCTION_ARGS)^M
   390	{^M
   391		PersonName    *a = (PersonName *) PG_GETARG_POINTER(0);^M
   392		PersonName    *b = (PersonName *) PG_GETARG_POINTER(1);^M
   393	^M
   394		PG_RETURN_BOOL(pname_internal(a, b, 2));^M
   395	}^M
   396	^M
   397	PG_FUNCTION_INFO_V1(pname_eq);^M
   398	^M
   399	Datum^M
   400	pname_eq(PG_FUNCTION_ARGS)^M
   401	{^M
   402		PersonName    *a = (PersonName *) PG_GETARG_POINTER(0);^M
   403		PersonName    *b = (PersonName *) PG_GETARG_POINTER(1);^M
   404		^M
   405		PG_RETURN_BOOL(pname_internal(a, b, 3));^M
   406	}^M
   407	^M
   408	PG_FUNCTION_INFO_V1(pname_ge);^M
   409	^M
   410	Datum^M
   411	pname_ge(PG_FUNCTION_ARGS)^M
   412	{^M
   413		PersonName    *a = (PersonName *) PG_GETARG_POINTER(0);^M
   414		PersonName    *b = (PersonName *) PG_GETARG_POINTER(1);^M
   415	^M
   416		PG_RETURN_BOOL(pname_internal(a, b, 4));^M
   417	}^M
   418	^M
   419	PG_FUNCTION_INFO_V1(pname_gt);^M
   420	^M
   421	Datum^M
   422	pname_gt(PG_FUNCTION_ARGS)^M
   423	{^M
   424		PersonName    *a = (PersonName *) PG_GETARG_POINTER(0);^M
   425		PersonName    *b = (PersonName *) PG_GETARG_POINTER(1);^M
   426	^M
   427		PG_RETURN_BOOL(pname_internal(a, b, 5));^M
   428	}^M
   429	^M
   430	PG_FUNCTION_INFO_V1(pname_neq);^M
   431	^M
   432	Datum^M
   433	pname_neq(PG_FUNCTION_ARGS)^M
   434	{^M
   435		PersonName    *a = (PersonName *) PG_GETARG_POINTER(0);^M
   436		PersonName    *b = (PersonName *) PG_GETARG_POINTER(1);^M
   437	^M
   438		PG_RETURN_BOOL(pname_internal(a, b, 6));^M
   439	}^M
   440	^M
   441	PG_FUNCTION_INFO_V1(pname_family);^M
   442	^M
   443	Datum^M
   444	pname_family(PG_FUNCTION_ARGS)^M
   445	{^M
   446		PersonName    *a = (PersonName *) PG_GETARG_POINTER(0);^M
   447		^M
   448		// I am using PG_RETURN_CSTRING. ^M
   449		// PG_RETURN_TEXT is used to return a text value directly.^M
   450		// PG_RETURN_TEXT_P is used when returning a text value allocated with palloc or char pointer.^M
   451		// Keep it simple.^M
   452		^M
   453		PG_RETURN_TEXT_P(cstring_to_text(pname_internal_two(a, 8)));^M
   454	}^M
   455	^M
   456	PG_FUNCTION_INFO_V1(pname_given);^M
   457	^M
   458	Datum^M
   459	pname_given(PG_FUNCTION_ARGS)^M
   460	{^M
   461		PersonName    *a = (PersonName *) PG_GETARG_POINTER(0);^M
   462	^M
   463		PG_RETURN_TEXT_P(cstring_to_text(pname_internal_two(a, 9)));^M
   464	}^M
   465	^M
   466	PG_FUNCTION_INFO_V1(pname_show);^M
   467	^M
   468	Datum^M
   469	pname_show(PG_FUNCTION_ARGS)^M
   470	{^M
   471		PersonName    *a = (PersonName *) PG_GETARG_POINTER(0);^M
   472	^M
   473		PG_RETURN_TEXT_P(cstring_to_text(pname_internal_two(a, 10)));^M
   474	}^M
   475	^M
   476	^M
   477	// Using strcmp in the both pname_"compare..." functions for b-tree indexing^M
   478	^M
   479	PG_FUNCTION_INFO_V1(pname_btree_datastructure);^M
   480	^M
   481	Datum pname_btree_datastructure(PG_FUNCTION_ARGS)^M
   482	{^M
   483	    PersonName *pname1 = (PersonName *) PG_GETARG_POINTER(0);   // no need to free pname1 or pname2 as i am not allocating memory to them i.e. not doing palloc or malloc or calloc etc.^M
   484	    PersonName *pname2 = (PersonName *) PG_GETARG_POINTER(1);	// Postgres Manages the memory address internally for arguments passed to function like PG_GETARG_POINTER. So, Postgres will free them. I don't have to.^M
   485	    ^M
   486	    PG_RETURN_INT32(pname_compare_datastructure(pname1, pname2));^M
   487	}^M
   488	^M
   489	// Using pname_hash for hash indexing^M
   490	^M
   491	// c variable is int below. It will store the address.^M
   492	PG_FUNCTION_INFO_V1(pname_hash);^M
   493	^M
   494	Datum^M
   495	pname_hash(PG_FUNCTION_ARGS)^M
   496	{^M
   497	    int hash = 5381;  //Dan Bernstein popularized hash ..York university.. saw in many sites..^M
   498	    int c;^M
   499	    int i;^M
   500	    PersonName *pname = (PersonName *) PG_GETARG_POINTER(0);^M
   501	^M
   502	    whitespace_removal(pname->pname);^M
   503	    ^M
   504	    for (i=0; i<strlen(pname->pname); i++) ^M
   505		{ ^M
   506		c = pname->pname[i];    //The ASCII value of the characters in the name is stored in c in each iteration through the characters.^M
   507		// This will include the ascii value of comma also for calculation of hash .. but since names are unique, i guess its not an issue.^M
   508		hash = ((hash << 5) + hash) + c;     //Bit wise shift operator .. shifting the binary representation of value stored in variable hash to the left by 5 positions. i.e. right padding by ^M
   509		}^M
   510	    PG_RETURN_INT32(hash);^M
   511	}^M


===== Testing Results =====


===============================================================================
-rw-r--r-- 1 jas cs9315 4501 Mar 31 19:49 /home/cs9315/24T1.work/ass1/all/5464669/std.out
===============================================================================

     1	rm -f pname.so pname.o  \
     2	    pname.bc
     3	rm -f pname.sql
     4	waiting for server to shut down.... done
     5	server stopped
     6	waiting for server to start.... done
     7	server started
     8	
     9	===== Building =====
    10	
    11	rm -f pname.sql; \
    12	C=`pwd`; \
    13	sed -e "s:_OBJWD_:$C:g" < pname.source > pname.sql
    14	gcc -Wall -Wmissing-prototypes -Wpointer-arith -Wdeclaration-after-statement -Werror=vla -Wendif-labels -Wmissing-format-attribute -Wimplicit-fallthrough=3 -Wcast-function-type -Wformat-security -fno-strict-aliasing -fwrapv -fexcess-precision=standard -Wno-format-truncation -Wno-stringop-truncation -O2 -fPIC -I. -I./ -I/localstorage/jas/pgsql/include/server -I/localstorage/jas/pgsql/include/internal  -D_GNU_SOURCE   -c -o pname.o pname.c
    15	pname.c: In function M-bM-^@M-^Xpname_internal_twoM-bM-^@M-^Y:
    16	pname.c:287:41: warning: M-bM-^@M-^Xa_given_posM-bM-^@M-^Y may be used uninitialized in this function [-Wmaybe-uninitialized]
    17	  287 |  a_family = (char*) palloc ((a_given_pos+1) * sizeof(char));
    18	      |                             ~~~~~~~~~~~~^~~
    19	pname.c:313:51: warning: M-bM-^@M-^Xa_show_given_posM-bM-^@M-^Y may be used uninitialized in this function [-Wmaybe-uninitialized]
    20	  313 |  a_show_given = (char*) palloc ((a_show_given_pos + 1) * sizeof(char));
    21	      |                                 ~~~~~~~~~~~~~~~~~~^~~~
    22	pname.c: In function M-bM-^@M-^Xpname_internalM-bM-^@M-^Y:
    23	pname.c:198:41: warning: M-bM-^@M-^Xa_given_posM-bM-^@M-^Y may be used uninitialized in this function [-Wmaybe-uninitialized]
    24	  198 |  a_family = (char*) palloc ((a_given_pos+1) * sizeof(char));
    25	      |                             ~~~~~~~~~~~~^~~
    26	pname.c:205:41: warning: M-bM-^@M-^Xb_given_posM-bM-^@M-^Y may be used uninitialized in this function [-Wmaybe-uninitialized]
    27	  205 |  b_family = (char*) palloc ((b_given_pos+1) * sizeof(char));
    28	      |                             ~~~~~~~~~~~~^~~
    29	gcc -Wall -Wmissing-prototypes -Wpointer-arith -Wdeclaration-after-statement -Werror=vla -Wendif-labels -Wmissing-format-attribute -Wimplicit-fallthrough=3 -Wcast-function-type -Wformat-security -fno-strict-aliasing -fwrapv -fexcess-precision=standard -Wno-format-truncation -Wno-stringop-truncation -O2 -fPIC pname.o -L/localstorage/jas/pgsql/lib   -Wl,--as-needed -Wl,-rpath,'/localstorage/jas/pgsql/lib',--enable-new-dtags  -shared -o pname.so
    30	
    31	===== Testing =====
    32	
    33	Warning: build warning from Postgres MakeFile, check test.log for details
    34	
    35	
    36	
    37	
    38	These tests will check if you have basic functionality for the PersonName type
    39	queries1 - Will your PersonName type accept valid input?
    40	queries2 - Will your PersonName type reject invald input?
    41	queries3 - Will your PersonName type correctly identify True operatons?
    42	queries4 - Will your PersonName type correclty identify False operations?
    43	queries5 - Will your PersonName type correclty print the given(), family() and show()?
    44	
    45	PASS: sanity-checks -- data -- queries1
    46	PASS: sanity-checks -- data -- queries2
    47	PASS: sanity-checks -- data -- queries3
    48	PASS: sanity-checks -- data -- queries4
    49	PASS: sanity-checks -- data -- queries5
    50	
    51	
    52	
    53	These tests will check small queries
    54	data1 - All unique PersonName examples given in the assignment 1 spec
    55	data2 - PersonName examples given in the assignment 1 spec with duplicates
    56	data3 - The most popular 400 first and last names
    57	
    58	PASS: users -- data1 -- queries1
    59	PASS: users -- data1 -- queries2
    60	PASS: users -- data1 -- queries3
    61	PASS: users -- data1 -- queries4
    62	PASS: users -- data2 -- queries1
    63	PASS: users -- data2 -- queries2
    64	PASS: users -- data2 -- queries3
    65	PASS: users -- data2 -- queries4
    66	PASS: users -- data3 -- queries1
    67	PASS: users -- data3 -- queries2
    68	PASS: users -- data3 -- queries3
    69	PASS: users -- data3 -- queries4
    70	
    71	
    72	
    73	These tests will check how well your PersonName type can handle increasingly large amounts of data
    74	data1 - 100 random names
    75	data2 - 1000 random names
    76	data3 - 10000 random names
    77	data4 - 100000 random names
    78	queries1 - create a hash index and observe what method is used to find rows (sometimes PostgreSQL will pick a different searching method)
    79	queries2 - run some complex queries on the table
    80	
    81	PASS: students -- data1 -- queries1
    82	PASS: students -- data1 -- queries2
    83	PASS: students -- data2 -- queries1
    84	PASS: students -- data2 -- queries2
    85	PASS: students -- data3 -- queries1
    86	PASS: students -- data3 -- queries2
    87	PASS: students -- data4 -- queries1
    88	PASS: students -- data4 -- queries2
    89	
    90	
    91	
    92	These tests will check queries involving large amounts of data
    93	data1 - Long names
    94	data2 - 1000s of John Smith's
    95	
    96	PASS: big-data -- data1 -- queries1
    97	PASS: big-data -- data1 -- queries2
    98	PASS: big-data -- data2 -- queries1
    99	PASS: big-data -- data2 -- queries2


===== Marks =====

Passed 29 / 29 Tests

Final mark = 15.0 / 15

!!section tests
!!section assess